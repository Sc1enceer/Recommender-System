import entity.Item;import entity.Score;import entity.User;import java.util.Map;import java.util.Set;public class CalculateSimilarity {    public static double euclidDist(User user1, User user2,                                    Set<Item> itemSet){        double sum = 0;        for(Item item: itemSet){            double score1 = 0.0;            double score2 = 0.0;            int itemId = item.getItemId();            if(user1.getRatedItems().contains(item) && user2.getRatedItems().contains(item)){                 score1 = user1.getItemScores(item);                 score2 = user2.getItemScores(item);            } else if (user1.getRatedItems().contains(item)){                score1 = user1.getItemScores(item);            } else if (user2.getRatedItems().contains(item)){                score2 = user2.getItemScores(item);            }            double temp = Math.pow((score1 - score2), 2);            sum += temp;        }        return Math.sqrt(sum);    }    public static double cosineDist(User user1, User user2,                                    Set<Item> itemSet){        double dist = 0;        double numerator = 0;        double denominator1 = 0;        double denominator2 = 0;        for(Item item: itemSet){            double score1 = 0.0;            double score2 = 0.0;            if(user1.getRatedItems().contains(item) && user2.getRatedItems().contains(item)){                score1 = user1.getItemScores(item);                score2 = user2.getItemScores(item);            } else if (user1.getRatedItems().contains(item)){                score1 = user1.getItemScores(item);            } else if (user2.getRatedItems().contains(item)){                score2 = user2.getItemScores(item);            }            denominator1 += Math.pow(score1, 2);            denominator2 += Math.pow(score2, 2);        }        dist = ((1.0 * numerator) / (Math.sqrt(denominator1) * Math                .sqrt(denominator2)));        return dist;    }}